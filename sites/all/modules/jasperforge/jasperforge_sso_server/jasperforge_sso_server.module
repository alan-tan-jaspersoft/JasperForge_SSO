<?php

include_once 'includes/user_form.inc';
include_once 'includes/registration_form.inc';

function jasperforge_sso_server_init()
{
  if($_GET['q'] == 'cas/logout')
    drupal_add_css(drupal_get_path('module', 'jasperforge_sso_server') . '/theme/css/logout_page.css',
                    array('group'=> CSS_THEME , 'weight'=> 999));
}


/**
 * implements hook_menu
 */
function jasperforge_sso_server_menu()
{
  $items = array();

  $items['admin/config/people/jf-sso'] = array(
    'title' => 'JasperForge SSO',
    'description' => 'Settings for JasperForge SSO',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jasperforge_sso_server_admin_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/admin_form.inc'
    );
  $items['jf-sso'] = array(
    'page callback' => 'jasperforge_sso_server_callback',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
    );
  $items['jf-sso/reset-pass'] = array(
    'page callback' => 'jasperforge_sso_server_reset_pass',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
    );

  $items['user/%user/manage-accounts'] = array(
    'title' => 'Manage Accounts',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jasperforge_sso_server_manage_form', 1),
    'access callback' => 'jasperforge_sso_server_manage_form_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/user_form.inc',
  );
/*  $items['user/%user/sso-merge'] = array(
    'title' => 'Account Merge',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jasperforge_sso_server_merge_form', 1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/user_form.inc',
  );*/
  return $items;
}





/**
 * Implements hook_menu_alter().
 */
function jasperforge_sso_server_menu_alter(&$items)
{
  $items['user/register']['page arguments'] = array('jasperforge_sso_server_reg_form');
  $items['user']['page callback'] = 'jasperforge_sso_server_user_page';
}



function jasperforge_sso_server_user_page()
{
  global $user;
  if ($user->uid)
  {
    menu_set_active_item('user/' . $user->uid);
    return menu_execute_active_handler(NULL, FALSE);
  }
  else
  {
    if(isset($_POST['form_id']) && strstr($_POST['form_id'], 'user_login'))
      return drupal_get_form($_POST['form_id']);
    return drupal_get_form('user_login');
  }
}

/**
 * implements hook_user_login
 */
function jasperforge_sso_server_user_login(&$edit, $account)
{
  setcookie('jasperforge_sso_uid', $account->uid,  time() + 31536000, '/');
}


/**
 * implements hook_user_logout
 */
function jasperforge_sso_server_user_logout($account)
{
  setcookie ('jasperforge_sso_uid', '', time() - 3600, '/');
  if($_GET['q'] == 'cas/logout' && isset($_GET['url']))
    drupal_add_http_header('Refresh', "1; url={$_GET['url']}"); //redirect back to previous page after X delay
}


/**
 * Returns the array of supported SSO sites
 */
function jasperforge_sso_server_get_supported_sites()
{
  $jf_sso_sites = str_replace("\n", ',', variable_get('jf_sso_sites', 'www.jaspersoft.com,community.jaspersoft.com'));
  $jf_sso_sites = str_replace("\r", '', $jf_sso_sites);
  return $jf_sso_sites? explode(',', $jf_sso_sites) : array();
}


/**
 * Implements hook_cron_queue_info().
 */
function jasperforge_sso_server_cron_queue_info()
{
  $queues = array();
  $queues['sso_links'] = array(
    'worker callback' => 'jasperforge_sso_server_cron_callback', //function to call for each item
    'time' => 30, //seconds to spend working on the queue
    );
  return $queues;
}

/**
 * callback for cron queue
 */
function jasperforge_sso_server_cron_callback($data)
{
  switch ($data['op']) {
    case 'add':

      break;

    case 'del':
      JasperForgeSSO::remove_cred($data['site'], $data['cas_name']);

  }//switch
}




/**
 * Util function
 * Check user name availability
 *
 * @param String  $name
 * @param String  $ignore   Email address. If set, user name belonging to this email address will not be reported
 * @return  Mixed   Boolean TRUE if available, else the error msg
 */
function jasperforge_sso_server_check_name($name, $ignore = '')
{
  if($result = user_validate_name($name))
    return $result;
  $result = db_query('SELECT uid FROM {users} WHERE name=:name', array(':name'=>$name))
              ->fetchField();
  if($result)
    return t('The name <em>%name</em> is already taken.', array('%name' =>$name));

  foreach (jasperforge_sso_server_get_supported_sites() as $site)
    if(!JasperForgeSSO::check_name($site, $name, $ignore))
      return t('The name %name is already taken.', array('%name' =>$name));

  return TRUE;
}



/**
 * implements hook_user_delete
 * Cleanup DB
 */
function jasperforge_sso_server_user_delete($account)
{
  if(!db_table_exists('jasperforge_sso_links'))
    return;

  // dont send request back to client site if this was from there
  $skip = isset($_POST['site'])? escapeshellarg($_POST['site']) : '';
//  dpm("drush sso-user-op \"{$account->uid}\" user_cancel_delete ${skip} > /dev/null &", 'jasperforge_sso_server_user_delete');
  exec("drush sso-user-op \"{$account->uid}\" user_cancel_delete ${skip} > /dev/null &");
}


/**
 * Act on user account cancellations.
 *
 * This hook is invoked from user_cancel() before a user account is canceled.
 * Depending on the account cancellation method, the module should either do
 * nothing, unpublish content, or anonymize content. See user_cancel_methods()
 * for the list of default account cancellation methods provided by User module.
 * Modules may add further methods via hook_user_cancel_methods_alter().
 *
 * This hook is NOT invoked for the 'user_cancel_delete' account cancellation
 * method. To react on this method, implement hook_user_delete() instead.
 *
 * Expensive operations should be added to the global account cancellation batch
 * by using batch_set().
 *
 * @param $edit
 *   The array of form values submitted by the user.
 * @param $account
 *   The user object on which the operation is being performed.
 * @param $method
 *   The account cancellation method.
 *
 * @see user_cancel_methods()
 * @see hook_user_cancel_methods_alter()
 */
function jasperforge_sso_server_user_cancel($edit, $account, $method)
{
  // dont send request back to client site if this was from there
  $skip = isset($_POST['site'])? escapeshellarg($_POST['site']) : '';
  exec("drush sso-user-op \"{$account->uid}\" ${method} ${skip} > /dev/null &");
}


/**
 * implements hook_user_update
 */
function jasperforge_sso_server_user_update(&$edit, $account, $category)
{
  if(isset($_POST['cas_uid']))  // do not respond to remote requests
    return;
  if($_POST['form_id'] == 'user_admin_account' && $_POST['op'] != 'Update') // do not respond to non-update ops
    return;

  $have_links = db_query('SELECT * FROM {jasperforge_sso_links} WHERE uid=:uid', array(':uid' => $account->uid))
                  ->fetchField();
  if(!$have_links)
    return;

  $data = array();
  if($account->original->name != $account->name)
    $data['name'] = $account->name;
  if($account->original->status != $account->status)
    $data['status'] = $account->status;
  if($account->original->mail != $account->mail)
    $data['mail'] = $account->mail;
  if($account->original->roles != $account->roles)
    $data['roles'] = $account->roles;
  if(empty($data))
    return;

  $data = serialize($data);
  $data = escapeshellarg($data);

  exec("drush sso-update-remote {$account->uid} {$data} > /dev/null &");
}

/**
 * Receives SSO requests from client sites
 */
function jasperforge_sso_server_callback()
{
  if(!isset($_POST['secret']) || $_POST['secret'] != variable_get('jasperforge_sso_secret', '')){
    echo 'Unauthorized';
    drupal_exit();
  }

  if(!isset($_POST['op']) || !isset($_POST['site'])){
    echo 'Bad Request';
    drupal_exit();
  }

  $site = preg_replace('/^https?:\/\//', '', $_POST['site']);
  $site = trim($site, '/');
  if(!in_array($site, jasperforge_sso_server_get_supported_sites()))
  {
    echo 'Unsupported Site<br />This site needs to be added to the SSO server\'s supported site\'s list.';
    drupal_exit();
  }

  $function_name = "jasperforge_sso_server_sso_${_POST['op']}";
  echo function_exists($function_name)? $function_name() : 'Bad Request';
  drupal_exit();
}


function jasperforge_sso_server_sso_user_op()
{
  if(!isset($_POST['cas_uid']) || !isset($_POST['method']))
    return 'Bad Request';

  $account = user_load($_POST['cas_uid']);
  // Modules use hook_user_delete() to respond to deletion.
  if ($method != 'user_cancel_delete')
    module_invoke_all('user_cancel', array(), $account, $method);

  _user_cancel(array(), $account, $_POST['method']);
}

function jasperforge_sso_server_sso_unblock()
{
  $users = user_load_multiple(explode(',', $_POST['cas_uid']));
  foreach ($users as $user)
    user_save($user, array('status' => 1));

  $data = serialize(array('status' => 1));
  $data = escapeshellarg($data);
  $skip = isset($_POST['site'])?  escapeshellarg($_POST['site']) : '';
  exec("drush sso-update-remote {$account->uid} {$data} ${skip} > /dev/null &");
  return 'TRUE';
}

function jasperforge_sso_server_sso_block()
{
  $users = user_load_multiple(explode(',', $_POST['cas_uid']));
  foreach ($users as $user)
    user_save($user, array('status' => 0));

  $data = serialize(array('status' => 0));
  $data = escapeshellarg($data);
  $skip = isset($_POST['site'])?  escapeshellarg($_POST['site']) : '';
  exec("drush sso-update-remote {$account->uid} {$data} ${skip} > /dev/null &");
  return 'TRUE';
}


function jasperforge_sso_server_sso_check_mail()
{
  if(!isset($_POST['mail']))
    return 'Bad Request';
  $result = db_query('SELECT uid FROM {users} WHERE mail=:mail', array(':mail' => $_POST['mail']))->fetchField();
  if(!$result)
    return -1;
  return $result;
}

function jasperforge_sso_server_sso_notify()
{
  if(!isset($_POST['uid']))
    return 'Bad Request';

  $_POST['cas_uid'] = db_query('SELECT uid from {users} WHERE uid=:uid', array(':uid' => $_POST['cas_uid']))
                        ->fetchField();
  if(!$_POST['cas_uid'])
    return 'User Not Found on SSO server.';

  try{
    $links = new JasperForgeSSO($_POST['cas_uid']);
//    $links->creds['active'][$site] = array('uid' => $_POST['uid'], 'type' => 'auto');
    $links->skip = $_POST['site'];
    $links->sso_link(array('site' => $_POST['site'], 'link_uid' => $_POST['uid'], 'type' => 'auto'));
    $links->save();
  }
  catch(Exception $e){
    watchdog_exception(jasperforge_sso_server, $e);
    return 'SSO server exception';
  }
  return 'TRUE';
}

function jasperforge_sso_server_sso_link()
{
  // TODO implement remote initiated link
  return;

  try{
    $link = new JasperForgeSSO($_POST['cas_uid']);
    if(isset($link->creds['inactive'][$_POST['site'] ]))
      $link->creds['active'][$_POST['site'] ] = $link->creds['inactive'][$_POST['site'] ];
    else
      unset($link->creds['active'][$_POST['site'] ]);
    $link->save();
  }
  catch(Exception $e){
    watchdog_exception('jasperforge_sso_server', $e);
    return 'FALSE';
  }
  return 'TRUE';
}


function jasperforge_sso_server_sso_unlink()
{
  try{
    $link = new JasperForgeSSO($_POST['cas_uid']);
    $link->skip = $_POST['site'];
    $link->sso_unlink($_POST['site']);
    $link->save();
  }
  catch(Exception $e){
    watchdog_exception('jasperforge_sso_server', $e);
    return 'FALSE';
  }
  return 'TRUE';
}


function jasperforge_sso_server_sso_reset_pass()
{
  $account = user_load($_POST['cas_uid']);
  if(!$account)
    return 'User not found';

  // Mail one time login URL and instructions using current language.
  include_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'user') . '/user.module';
  global $language;
  $mail = _user_mail_notify('password_reset', $account, $language);
  if (empty($mail))
  {
    watchdog('jasperforge_sso_server',
             'Password reset failed for account %name with Email: %email.<br />',
              array('%name' => $account->name, '%email' => $account->mail),
              WATCHDOG_ERROR);
    return 'FALSE';
  }

  watchdog('jasperforge_sso_server',
          'Password reset instructions mailed to %name at %email.',
          array('%name' => $account->name, '%email' => $account->mail)
          );
  return 'TRUE';
}


function jasperforge_sso_server_sso_create_user()
{
  if(!isset($_POST['mail']) || !isset($_POST['name']))
    return 'Bad Request';

  $user = new stdClass();
  $user->is_new = TRUE;
  $user->mail = $_POST['mail'];

  // check user name availability on SSO server
  $result = db_query('SELECT uid FROM {users} WHERE name=:name', array(':name'=>$_POST['name']))->fetchField();
  if($result)
  {
    $result = drupal_substr($_POST['mail'], 0, strpos($_POST['mail'], '@'));
    if($result == $_POST['name'])
      return t('User name already taken.');
    $_POST['name'] = $result;
  }

  // find out if mail can be used
  $list = array($_POST['site']);
  try{
    foreach (jasperforge_sso_server_get_supported_sites() as $site)
    {
      if($site == $_POST['site'])
        continue;
      if(JasperForgeSSO::find_cred($site, $_POST['mail']))
        $list[] = $site;
    }
  }
  catch(Exception $e)
  {
    if(stristr($e->getMessage(), 'user 1'))
      return $e->getMessage();

    throw $e;
  }

  // check user name availability on all client sites
  foreach (jasperforge_sso_server_get_supported_sites() as $site)
    if(JasperForgeSSO::check_name($site, $_POST['name'], $_POST['mail']))
      continue;
    elseif(!stristr($_POST['mail'], "{$_POST['name']}@"))
    {
      $_POST['name'] = drupal_substr($_POST['mail'], 0, strpos($_POST['mail'], '@'));
      foreach (jasperforge_sso_server_get_supported_sites() as $value)
        if(!JasperForgeSSO::check_name($value, $_POST['name'], $_POST['mail']))
        {
          $_POST['name'] = NULL;
          break;
        }
      if(!$_POST['name'])
        return t('User name already taken.');
      else
        break;
    }
    else
      return t('User name already taken.');


  $user->name = $_POST['name'];
  $user->status = 1;
  $user->pass = user_password();
  $user = user_save($user);

  if(!$user)
    return 'FALSE';

  _user_mail_notify('register_admin_created', $account);
  watchdog('user', 'New user: %name (%email).',
          array('%name' => $user->name,
                '%email' => $user->mail),
          WATCHDOG_NOTICE, l(t('edit'), 'user/' . $user->uid . '/edit'));



  foreach ($list as $site)
    exec("drush sso-user-merge-2 {$site} {$user->name} {$user->uid} {$_POST['mail']} > /dev/null &");

  return 'TRUE';
}

/**
 * Return additional CAS attributes when acting as a CAS server.
 *
 * This hook allows modules to add additional CAS attributes to the basic
 * response by the CAS Server module.
 *
 * @param $account
 *   The user being logged in.
 * @param $service
 *   The service URL of the site the user is logging in to.
 * @param $ticket
 *   The login ticket the user provided.
 *
 * @return
 *   An associative array of CAS attributes for the user.
 *
 * @see hook_cas_server_user_attributes_alter()
 */
function jasperforge_sso_server_cas_server_user_attributes($account, $service, $ticket)
{
  $attributes = array();

  $attributes['cas_uid'] = $account->uid;

//  return $attributes;
}


/**
 * Batch op callback
 * Looks like nothing is using this
 */
function jasperforge_sso_server_batch_link($uid, $data, &$context)
{
  if(!isset($context['results']['links']))
    $context['results']['links'] = new JasperForgeSSO($uid, TRUE);

  $result = $context['results']['links']->sso_link($data);
  if($result === TRUE)
    continue; // added successfully, next one

  // other error
  $msg = "We could not link your account on <em>{$data['site']}</em> at the moment, Please try again later.";
  drupal_set_message($msg, 'warning');

}


function jasperforge_sso_server_batch_link_finish($success, $results, $operations)
{
  $results['links']->save();
  return;
  if ($success)
    $message = format_plural(count($results), 'One user account processed.', '@count accounts processed.');
  else
    $message = t('Finished with an error.');

  drupal_set_message($message);
  watchdog('jasperforge_sso_client', 'Processed the following user account(s): ' . implode(', ', $results));
}